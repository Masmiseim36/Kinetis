<!DOCTYPE CrossStudio_Package_Description_File>
<package name="Kinetis" author="Rowley Associates Ltd" cpu_manufacturer="Freescale" cpu_family="Kinetis" version="1.9" build_version="2013041001.7155;crossworks_v2;crossworks_v2" crossstudio_versions="8:2.1-" dependencies="CMSIS_3">

<targets>
  <category name="K10 Series" >
    <cpu name="MK10DN32xxx5"/>
    <cpu name="MK10DX32xxx5"/>
    <cpu name="MK10DN64xxx5"/>
    <cpu name="MK10DX64xxx5"/>
    <cpu name="MK10DN128xxx5"/>
    <cpu name="MK10DX128xxx5"/>
    <cpu name="MK10DX64xxx7"/>
    <cpu name="MK10DX128xxx7"/>
    <cpu name="MK10DX256xxx7"/>
    <cpu name="MK10DX128Zxxx10"/>
    <cpu name="MK10DX256Zxxx10"/>
    <cpu name="MK10DN512Zxxx10"/>
    <cpu name="MK10DX128xxx10"/>
    <cpu name="MK10DX256xxx10"/>
    <cpu name="MK10DN512xxx10"/>
    <cpu name="MK10FX512xxx12"/>
    <cpu name="MK10FN1M0xxx12"/>
    <cpu name="MK11DX128xxx5"/>
    <cpu name="MK11DX256xxx5"/>
    <cpu name="MK11DN512xxx5"/>
    <cpu name="MK12DX128xxx5"/>
    <cpu name="MK12DX256xxx5"/>
    <cpu name="MK12DN512xxx5"/>
  </category>
  <category name="K20 Series" >
    <cpu name="MK20DN32xxx5"/>
    <cpu name="MK20DX32xxx5"/>
    <cpu name="MK20DN64xxx5"/>
    <cpu name="MK20DX64xxx5"/>
    <cpu name="MK20DN128xxx5"/>
    <cpu name="MK20DX128xxx5"/>
    <cpu name="MK20DX64xxx7"/>
    <cpu name="MK20DX128xxx7"/>
    <cpu name="MK20DX256xxx7"/>
    <cpu name="MK20DX128Zxxx10"/>
    <cpu name="MK20DX256Zxxx10"/>
    <cpu name="MK20DN512Zxxx10"/>
    <cpu name="MK20DX128xxx10"/>
    <cpu name="MK20DX256xxx10"/>
    <cpu name="MK20DN512xxx10"/>
    <cpu name="MK21DX128xxx5"/>
    <cpu name="MK21DX256xxx5"/>
    <cpu name="MK21DN512xxx5"/>
    <cpu name="MK22DX128xxx5"/>
    <cpu name="MK22DX256xxx5"/>
    <cpu name="MK22DN512xxx5"/>
  </category>
  <category name="K30 Series" >
    <cpu name="MK30DX64xxx7"/>
    <cpu name="MK30DX128xxx7"/>
    <cpu name="MK30DX256xxx7"/>
    <cpu name="MK30DX128Zxxx10"/>
    <cpu name="MK30DX256Zxxx10"/>
    <cpu name="MK30DN512Zxxx10"/>
    <cpu name="MK30DX128xxx10"/>
    <cpu name="MK30DX256xxx10"/>
    <cpu name="MK30DN512xxx10"/>
  </category>
  <category name="K40 Series" >
    <cpu name="MK40DX64xxx7"/>
    <cpu name="MK40DX128xxx7"/>
    <cpu name="MK40DX256xxx7"/>
    <cpu name="MK40DX128Zxxx10"/>
    <cpu name="MK40DX256Zxxx10"/>
    <cpu name="MK40DN512Zxxx10"/>
    <cpu name="MK40DX128xxx10"/>
    <cpu name="MK40DX256xxx10"/>
    <cpu name="MK40DN512xxx10"/>
  </category>
  <category name="K50 Series" >
    <cpu name="MK50DX128xxx7"/>
    <cpu name="MK50DX256xxx7"/>
    <cpu name="MK50DX256xxx10"/>
    <cpu name="MK50DN512xxx10"/>
    <cpu name="MK50DX256Zxxx10"/>
    <cpu name="MK50DN512Zxxx10"/>
    <cpu name="MK51DX128xxx7"/>
    <cpu name="MK51DX256xxx7"/>
    <cpu name="MK51DX256xxx10"/>
    <cpu name="MK51DN512xxx10"/>
    <cpu name="MK51DX256Zxxx10"/>
    <cpu name="MK51DN512Zxxx10"/>
    <cpu name="MK52DN512xxx10"/>
    <cpu name="MK52DN512Zxxx10"/>
    <cpu name="MK53DX256xxx10"/>
    <cpu name="MK53DN512xxx10"/>
    <cpu name="MK53DX256Zxxx10"/>
    <cpu name="MK53DN512Zxxx10"/>
  </category>
  <category name="K60 Series" >
    <cpu name="MK60DN256xxx10"/>
    <cpu name="MK60DX256xxx10"/>
    <cpu name="MK60DN512xxx10"/>
    <cpu name="MK60DN256Zxxx10"/>
    <cpu name="MK60DX256Zxxx10"/>
    <cpu name="MK60DN512Zxxx10"/>
    <cpu name="MK60FX512xxx12"/>
    <cpu name="MK60FN1M0xxx12"/>
    <cpu name="MK60FX512xxx15"/>
    <cpu name="MK60FN1M0xxx15"/>
    <cpu name="MK61FX512xxx12"/>
    <cpu name="MK61FN1M0xxx12"/>
    <cpu name="MK61FX512xxx15"/>
    <cpu name="MK61FN1M0xxx15"/>
  </category>
  <category name="K70 Series" >
    <cpu name="MK70FX512xxx12"/>
    <cpu name="MK70FN1M0xxx12"/>
    <cpu name="MK70FX512xxx15"/>
    <cpu name="MK70FN1M0xxx15"/>
  </category>
  <category name="KL0 Series" >
    <cpu name="MKL02Z8Vxx4"/>
    <cpu name="MKL02Z16Vxx4"/>
    <cpu name="MKL02Z32Vxx4"/>
    <cpu name="MKL04Z8Vxx4"/>
    <cpu name="MKL04Z16Vxx4"/>
    <cpu name="MKL04Z32Vxx4"/>
    <cpu name="MKL05Z8Vxx4"/>
    <cpu name="MKL05Z16Vxx4"/>
    <cpu name="MKL05Z32Vxx4"/>
  </category>
  <category name="KL1 Series" >
    <cpu name="MKL14Z32Vxx4"/>
    <cpu name="MKL14Z64Vxx4"/>
    <cpu name="MKL15Z32Vxx4"/>
    <cpu name="MKL15Z64Vxx4"/>
    <cpu name="MKL15Z128Vxx4"/>
    <cpu name="MKL15Z256Vxx4"/>
  </category>
  <category name="KL2 Series" >
    <cpu name="MKL24Z32Vxx4"/>
    <cpu name="MKL24Z64Vxx4"/>
    <cpu name="MKL25Z32Vxx4"/>
    <cpu name="MKL25Z64Vxx4"/>
    <cpu name="MKL25Z128Vxx4"/>
    <cpu name="MKL25Z256Vxx4"/>
  </category>
</targets>

  <documentation>
    <section name="Creating Kinetis Projects">
      <h5>To create a new Kinetis project</h5>
      <ul>
        <li>Select the <b>File &gt; New &gt; New Project</b> menu item.</li>
        <li>Select the appropriate <b>Generic Kinetis</b> from the <b>Categories</b> list.</li>
        <li>Select the required project template type from the <b>Templates</b> list.</li>
        <li>Set the required project name and location directory.</li>
        <li>Click <b>OK</b>.</li>
      </ul>          
      <h5>To build and debug an application the runs in Flash memory</h5>
      <ul>
        <li>Select the project to work on by using the <b>Project &gt; Set Active Project</b> menu option.</li>
        <li>Select the configuration you require by using the <b>Build &gt; Set Active Build Configuration</b> menu option.</li>
        <li>Right click on the project node in the project explorer and select the <b>Flash</b> placement.</li>
        <li>Build the project by using the <b>Build &gt; Build Project</b> menu option.</li>
        <li>Connect to the appropriate target in the target window.</li>
        <li>Download and start debugging the current project by using <b>Debug &gt; Start Debugging</b>.</li>
      </ul>     
      <h5>To make the application startup from reset</h5>
      <ul>
        <li>Right click on the project node in the project explorer and select <b>Properties...</b></li>
        <li>In the properties window scroll down to the <b>Preprocessor Options</b> section.</li>
        <li>Type <b>STARTUP_FROM_RESET</b> into the <b>Preprocessor Definitions</b> property editor.</li>
      </ul>          
    </section>

    <section name="Kinetis Project Specifics">
      <h5>Target Processor</h5>
      <p>Once a project has been created you can select different target processors by right clicking on the project node in the project 
      explorer and selecting the <b>Target Processor</b> entry.</p>
      <p>Selecting the target processor will specify the memory map that is used for the build and debug. You can view the selected 
      memory map by right clicking on the project node in the project explorer and selecting <b>View Memory Map</b> or 
      <b>View Memory Map (as text)</b>.</p>
      <p>Selecting the target processor will cause the preprocessor definition <b>__TARGET_PROCESSOR</b> to be set to the specified processor
      name when you compile the project.</p>

      <h5>Section Placement</h5>
      <p>CrossStudio for ARM supports Kinetis projects running applications in a number of different
      memory configurations. You can select the memory configuration you require by right clicking on the project node in the 
      project explorer and selecting the <b>Placement</b> entry.</p> 
      <p>For Kinetis projects the set of placements are:</p>
      <ul>      
        <li><b>Flash</b> application runs in internal Flash memory.</li>
        <li><b>Flash Vectors In RAM</b> application runs in internal Flash memory with exception vectors in RAM memory.</li>
        <li><b>Flash Copy To RAM</b> application starts in internal flash and copies itself to run internal RAM memory.</li>
        <li><b>Flash Copy To RAM2</b> application starts in internal flash and copies itself to run in two RAM memory segments.
        Use the section placement macros property to specify the RAM names to copy to. For example 
        <b>RAM_NAME=DDR_CODE;RAM2_NAME=DDR_DATA_WB</b> will copy the code into the <b>DDR_CODE</b> segment and the data 
        into the <b>DDR_DATA_WB</b> segment.</li>
        <li><b>RAM</b> application runs in internal RAM memory.</li>
      </ul>

      <h5>Stack and Heap Sizes</h5>
      <p>The stack and heap sizes are set to be 128 bytes by default when a project is created. This enables projects to run on the smallest of
      the Kinetis processors. It is likely that you will need to change these values when developing applications to run on the larger of the
      Kinetis processors.</p>

      <h5>Target Startup Code</h5>
      <p>The startup code <a href="file:$(TargetsDir)/Kinetis/Kinetis_Startup.s">Kinetis_Startup.s</a>           
      is common to all Kinetis processors. There are a set of preprocessor defines that
      configure the startup code and are documented in the startup file itself. The startup code
      calls out to symbol <b>SystemInit</b> with the stack pointer set to the top of RAM.
      The <b>SystemInit</b> function can be used to set the CPU clock or configure
      any external memories prior to the C initialisation code as such it cannot access initialised 
      static data.</p>      

      <p>The startup code declares symoblic names (and weak implementations) for each interrupt service routine,
      for example the <b>PORTA_IRQHandler</b> function will be called when this interrupt occurs. 
      If you are porting code that
      has application specific interrupt service routine names then you can use the preprocessor definitions
      to rename the symbol for example <b>PORTA_IRQHandler=porta_isr</b>.</p>

      <h5>Target Script</h5>
      <p>The script <a href="file:$(TargetsDir)/Kinetis/Kinetis_Target.js">Kinetis_Target.js</a> is used by the
      debugger to identify the Kinetis part, match the project to the target and to reset the target board. The
      reset script contains a function <b>MassErase</b>. This function can be used to unlock a secured device
      by connecting to the device with the <b>Identify Target On Connect</b> cleared. You can then right click
      on the target (in the targets window) and select <b>MassErase</b>. Note that the project property 
      <b>target_extras_script</b> should be set to be <b>Extras()</b> to get the menu entry to display.</p>

      <h5>Kinetis Internal Flash Loader</h5>
      <p>The source code to the flash loaders <a href="file:$(TargetsDir)/Kinetis/Loader.hzp">(click to load solution)</a>
        for the internal Flash of the Kinetis is provided.</p>

      <h5>Memory Simulator</h5>
      <p>An Kinetis memory simulator is provided that simulates the memories of the various Kinetis devices. 
      The memory simulation parameter (which is set by the <b>Target Processor</b> selection) specifies the device name,
      the size of the internal Flash and RAM memories.</p>
     
      <h5>CMSIS support</h5>
      <p>CMSIS header files are included as part of the new project setup. 
      The file <a href="file:$(TargetsDir)/Kinetis/Kinetis.h">Kinetis.h</a> is provided which
      selects the appropriate header file depending on the target processor selection.</p>

      <h5>CTL support</h5>
      <p>The file <a href="file:$(TargetsDir)/Kinetis/Kinetis_ctl.c">Kinetis_ctl.c</a> implements the CTL system timer using the Cortex-M4
      SysTick timer. The timer is configured to interrupt at a 10 millisecond rate and increment the CTL system timer by 10 to give a 
      millisecond timer. The implementation uses the CMSIS <b>SystemCoreClock</b> global variable to determine the CPU clock
      frequency. The CTL samples that are provided in this package have board specific files that initialise this variable.</p>

      <p>The CTL interrupt support functions <b>ctl_global_interrupts_set</b>, <b>ctl_set_priority</b>, <b>ctl_unmask_isr</b> 
      and <b>ctl_mask_isr</b> are implemented in this file. The implementation uses the lowest half of the available NVIC 
      priorities (top bit set in the priority) for CTL interrupts and disables global interrupts by raising the NVIC basepriority 
      above the highest CTL priority. This enables you to use the upper half of the NVIC priorities for interrupts that do not
      use CTL and should not be disabled by a CTL interrupt.</p>
    </section>    

    <section name="OSJTAG firmware update">
      <p>The package contains an update to the firmware that can be loaded on to the OSJTAG hardware of the TWR CPU 
      modules. The updated firmware improves the download and debug performance of the CrossWorks 'Kinetis OSJTAG' target 
      interface. You'll need to use the firmware update procedure available from <a href="http://www.pemicro.com/osbdm">PE micro</a> and 
      point the updater program at the supplied file <a href="file:$(TargetsDir)/Kinetis/osbdm-jm60_kinetis_rowley_101_0.s19">osbdm-jm60_kinetis_rowley_101_0.s19</a>.
      You can click on the above link to get a copy of the firmware into the editor and then right click on the
      editor tab and select 'Copy Full Path' to get the path to the filename of the firmware into the paste buffer.</p>
    </section>

  </documentation>
  <history>  
    <version name="1.9">
      <description>Added support for MK11D5, MK12D5, MK21D5, MK22D5 and MKL02Z4 devices.</description>
       <description>Modified L series flash loader to run in 2K of SRAM - note 1K SRAM parts are not supported.</description>
    </version>
    <version name="1.8">
      <description>Fixed VECTORS_IN_RAM initialization.</description>
    </version>
    <version name="1.7">
      <description>Modified L series flash loader to run in 4K of SRAM - note that 2K and 1K parts
      are not supported.</description>
      <description>Samples removed - these are in their own board support packages.</description>
      <description>New CTL projects now allocate a process stack. If you have an existing CTL project
      then you should do similar since this is required for the CTL supplied 
      with CrossWorks for ARM version 2.3.1.</description>
    </version>
    <version name="1.6">
      <description>Fixed startup code when VECTORS_IN_RAM defined.</description>
      <description>Added preprocessor define <b>__FPU_PRESENT=1</b> to MKxxF <b>Target</b> property group entries.</description>
      <description>Changed startup code to fill to 0x400 rather than align to 0x400 to save Flash space.</description>
      <description>Added memory map support for DDR.</description>
      <description>Added TWR-K70F120M Dhrystone sample that executes in DDR.</description>
    </version>
    <version name="1.5">
      <description>Added support for L series devices. CrossWorks for ARM version 2.3 is required for Cortex-M0+ support.</description>
      <description>Supplied samples for FRDM-KL25Z.</description>
      <description>Supplied samples for TWR-K20D72M.</description>            
      <description>Fixed <b>Erase All</b> to set the flash security state to be unsecure.</description>
      <description>The <b>GetPartName</b> script now handles connecting to parts that are secured (but can be mass erased) and also
      to parts that have been erased. CrossWorks for ARM version 2.3 is required to make use of these facilities.</description>
      <description>Removed disabling the hardware lazy FP save feature for CTL. CTL supplied in CrossWorks for ARM version 2.3
      supports the hardware lazy FP save feature.</description>
      <description>Removed core CMSIS header files from this package. New projects will reference the include directory 
      <b>$(TargetsDir)/CMSIS_3/CMSIS/Include</b> of the CMSIS-3 package.
      If you have an existing project then you will have to add <b>$(TargetsDir)/CMSIS_3/CMSIS/Include</b> to the <b>User Include Directories</b>
      project property.</description>
    </version>
    <version name="1.4">
      <description>Support for latest parts based on the sub-family name and memory size 
      rather than specific part numbers. For example MK60DN512ZVMD10 has become MK60DN512Zxxx10. You will need to reselect
      the <b>Target Processer</b> property for existing projects.</description>
      <description>Updated the flash loader to handle 50Mhz and 120Mhz devices.</description>
      <description>Modified the startup code to have part specific vector tables.</description>
      <description>Modified the startup code to enable the FPU for devices that have one.</description>
      <description>Supplied samples for TWR-K20D50M, TWR-K60F120M and TWR-K70F120M.</description>
    </version>
    <version name="1.3">
      <description>Supplied samples for TWR-K53N512.</description>
      <description>Supplied firmware update for OSJTAG.</description>
      <description>Kinetis projects now have the 'GCC Target' property set to be 'arm-unknown-eabi'.</description>
      <description>Fixed reset script to stop the target prior to accessing MDM registers for 'P&amp;E' target interface.</description>
    </version>
    <version name="1.2">
      <description>Support for latest parts and new part numbering e.g MK60N512VMD100 has become MK60DN512ZVMD10. 
      You will need to reselect the <b>Target Processor</b> property for existing projects.</description>     
      <description>Added <b>GetPartName</b> and <b>MatchPartName</b> functions to the target script. New projects will set
      the <b>Get Part Name Script</b> and <b>Match Part Name Script</b> project properties to enable part name detection
      on connect and compatibility on start debugging (requires CrossWorks for ARM Version 2.1.2 and above).</description>
      <description>Removed <b>Kinetis_SystemInit.c</b> you'll need to add the appropriate CMSIS system_MKxxDZ10.c file
      to your project.</description>
      <description>Startup code now supplies a default weak <b>SystemInit()</b> function that disables the watchdog.</description>
    </version>
    <version name="1.1">
      <description>Fixed <b>Flash Vectors In RAM</b> placement when the <b>Enable Unused Symbol Removal</b> property is enabled.</description>
    </version>
    <version name="1.0">
      <description>Initial Release.</description>
    </version>
  </history>
</package>
